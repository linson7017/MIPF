#ifndef ImageStatisticsWidget_H__INCLUDED
#define ImageStatisticsWidget_H__INCLUDED

#include "MitkPluginView.h"
#include <QWidget>

// mitk includes
#include "mitkImageStatisticsCalculator.h"
//#include "mitkILifecycleAwarePart.h"
#include "mitkPlanarLine.h"
#include <mitkDataStorage.h>

class QmitkImageStatisticsCalculationThread;
class QmitkStepperAdapter;
class QmitkHistogramJSWidget;

class QLabel;
class QPushButton;
class QRadioButton;
class QDoubleSpinBox;
class QStackedWidget;
class QTableWidget;
class QFrame;
class QCheckBox;
class QGroupBox;


class ImageStatisticsWidget : public QWidget, public MitkPluginView
{
    Q_OBJECT
public:
    ImageStatisticsWidget(QF::IQF_Main* pMain);
    ~ImageStatisticsWidget();
    void Init(QWidget* parent);
private:

    /*!
    \  Convenient typedefs */
    typedef mitk::DataStorage::SetOfObjects  ConstVector;
    typedef ConstVector::ConstPointer        ConstVectorPointer;
    typedef ConstVector::ConstIterator       ConstVectorIterator;
    typedef std::map< mitk::Image *, mitk::ImageStatisticsCalculator::Pointer > ImageStatisticsMapType;
    typedef QList<mitk::DataNode*> SelectedDataNodeVectorType;
    typedef itk::SimpleMemberCommand< ImageStatisticsWidget > ITKCommandType;

public:
    virtual void CreateConnections();

    static const int STAT_TABLE_BASE_HEIGHT;

public slots:
    /** \brief  Called when the statistics update is finished, sets the results to GUI.*/
    void OnThreadedStatisticsCalculationEnds();

    /** \brief Update bin size for histogram resolution. */
    void OnHistogramBinSizeBoxValueChanged();

    protected slots:
    /** \brief  Saves the histogram to the clipboard */
    void OnClipboardHistogramButtonClicked();
    /** \brief  Saves the statistics to the clipboard */
    void OnClipboardStatisticsButtonClicked();
    /** \brief  Indicates if zeros should be excluded from statistics calculation */
    void OnIgnoreZerosCheckboxClicked();
    /** \brief Checks if update is possible and calls StatisticsUpdate() possible */
    void RequestStatisticsUpdate();
    /** \brief Jump to coordinates stored in the double clicked cell */
    void JumpToCoordinates(int row, int col);
    /** \brief Toogle GUI elements if histogram default bin size checkbox value changed. */
    void OnDefaultBinSizeBoxChanged();

signals:
    /** \brief Method to set the data to the member and start the threaded statistics update */
    void StatisticsUpdate();

protected:
    virtual void Update(const char* szMessage, int iValue = 0, void* pValue = 0);
    /** \brief  Writes the calculated statistics to the GUI */
    void FillStatisticsTableView(const std::vector<mitk::ImageStatisticsCalculator::Statistics> &s,
        const mitk::Image *image);


    std::vector<QString> CalculateStatisticsForPlanarFigure(const mitk::Image *image);

    void FillLinearProfileStatisticsTableView(const mitk::Image *image);

    /** \brief  Removes statistics from the GUI */
    void InvalidateStatisticsTableView();

    /** \brief Recalculate statistics for currently selected image and mask and
    * update the GUI. */
    void UpdateStatistics();

    /** \brief Listener for progress events to update progress bar. */
    void UpdateProgressBar();

    /** \brief Removes any cached images which are no longer referenced elsewhere. */
    void RemoveOrphanImages();

    /** \brief Computes an Intensity Profile along line and updates the histogram widget with it. */
    void ComputeIntensityProfile(mitk::PlanarLine* line);

    /** \brief Removes all Observers to images, masks and planar figures and sets corresponding members to zero */
    void ClearObservers();

    void Activated();
    void Deactivated();
    void Visible();
    void Hidden();
    void SetFocus();

    /** \brief Method called when itkModifiedEvent is called by selected data. */
    void SelectedDataModified();
    /** \brief  Method called when the data manager selection changes */
    void SelectionChanged(const QList<mitk::DataNode::Pointer> &selectedNodes);
    /** \brief  Method called to remove old selection when a new selection is present */
    void ReinitData();
    /** \brief  writes the statistics to the gui*/
    void WriteStatisticsToGUI();

    /** \brief Is called from the image navigator once the time step has changed */
    void OnTimeChanged(const itk::EventObject&);

    // if you have a planar figure selected, the statistics values will be saved in this one.
    std::vector<QString> m_PlanarFigureStatistics;
    QmitkImageStatisticsCalculationThread* m_CalculationThread;

    QmitkStepperAdapter*      m_TimeStepperAdapter;
    unsigned int              m_CurrentTime;
    QString                   m_Clipboard;

    //ui
    QLabel* m_ErrorMessageLabel;
    QLabel* m_SelectedFeatureImageLabel;
    QLabel* m_SelectedMaskLabel;
    QLabel* m_HistogramBinSizeCaptionLabel;
    QLabel* m_InfoLabel;

    QRadioButton* m_barRadioButton;
    QRadioButton* m_lineRadioButton;

    QCheckBox* m_UseDefaultBinSizeBox;
    QCheckBox* m_CheckBox4dCompleteTable;
    QCheckBox* m_IgnoreZerosCheckbox;

    QDoubleSpinBox* m_HistogramBinSizeSpinbox;

    QPushButton* m_ButtonCopyHistogramToClipboard;
    QPushButton* m_ButtonCopyStatisticsToClipboard;

    QTableWidget* m_StatisticsTable;
    QStackedWidget* m_StatisticsWidgetStack;
    QmitkHistogramJSWidget* m_JSHistogram;

    QFrame* m_BinSizeFrame;

    QGroupBox* groupBox;
    QGroupBox* groupBox_3;

    // Image and mask data
    mitk::Image* m_SelectedImage;
    mitk::Image* m_SelectedImageMask;
    mitk::PlanarFigure* m_SelectedPlanarFigure;


    // observer tags
    long m_ImageObserverTag;
    long m_ImageMaskObserverTag;
    long m_PlanarFigureObserverTag;
    long m_TimeObserverTag;

    SelectedDataNodeVectorType m_SelectedDataNodes;

    bool m_CurrentStatisticsValid;
    bool m_StatisticsUpdatePending;
    bool m_StatisticsIntegrationPending;
    bool m_DataNodeSelectionChanged;
    bool m_Visible;

    std::vector<mitk::Point3D>     m_WorldMinList;
    std::vector<mitk::Point3D>     m_WorldMaxList;
};
#endif // ImageStatisticsWidget_H__INCLUDED
